<?php

/**
 * @file
 * Implements the PayFast payment method for Drupal Commerce checkout.
 * Based on:  http://drupal.org/project/commerce_payfast
 */

/**
 * Implements hook_menu().
 */
function commerce_payfast_menu()
{
    $items = array();

    // Define the path to receive ITNs.
    $items['commerce_payfast/itn/%commerce_payment_method_instance'] = array(
     'page callback' => 'commerce_payfast_process_itn',
     'page arguments' => array( 2 ), 
     'access callback' => true, 
     'type' => MENU_CALLBACK, 
     );

    return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_payfast_commerce_payment_method_info()
{
    $payment_methods = array();

    $payment_methods['commerce_payfast'] = array( 
        'title' => t( 'PayFast' ),
        'description' => t( 'Integrates with the PayFast payment gateway.' ),
        'active' => true, 
        'offsite' => true, 
        'offsite_autoredirect' => true, 
    );

    return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_payfast_settings_form( $settings = null )
{
    $form = array();

    $form['merchant_id'] = array( 
        '#type' => 'textfield', 
        '#title' => t( 'PayFast Merchant ID' ), 
        '#description' => t( 'The Merchant ID as given by the PayFast system. Used to uniquely identify the receiving account.' ),
        '#default_value' => isset( $settings['merchant_id'] ) ? $settings['merchant_id'] : '10000103', '#required' => true, );

    $form['merchant_key'] = array( 
        '#type' => 'textfield', 
        '#title' => t( 'PayFast Merchant Key' ), 
        '#description' => t( 'The Merchant Key as given by the PayFast system.' ),
        '#default_value' => isset( $settings['merchant_key'] ) ? $settings['merchant_key'] : '479f49451e829', '#required' => true, );

    $form['passphrase'] = array(
        '#type' => 'textfield',
        '#title' => t( 'PayFast Passphrase' ),
        '#description' => t( 'The passphrase that is set on your PayFast account.' ),
        '#default_value' => isset( $settings['passphrase'] ) ? $settings['passphrase'] : '', '#required' => false, );


    $form['server'] = array( 
        '#type' => 'radios', '#title' => t( 'PayFast server' ), 
        '#options' => array( 'sandbox' => ( 'Sandbox - use for testing' ),
        'live' => ( 'Live - use for processing real transactions' ), ), '#default_value' => isset( $settings['server'] ) ? $settings['server'] : 'sandbox', );

    return $form;
}

/**
 * Payment method callback: redirect form, a wrapper around the module's
 *   general use function for building a PayFast Website Payments form.
 */
function commerce_payfast_redirect_form( $form, &$form_state, $order, $payment_method )
{
    $wrapper = entity_metadata_wrapper( 'commerce_order', $order );

    $currency_code = $wrapper->commerce_order_total->currency_code->value();
    $amount = $wrapper->commerce_order_total->amount->value();
    $settings = $payment_method['settings'];

    $customer = array();
    $commerce_customer = commerce_customer_profile_load( $order->commerce_customer_billing['und'][0]['profile_id'] );
    $account = user_load( $commerce_customer->uid );
    $commerce_customer = $commerce_customer->commerce_customer_address['und'][0];

    // @TODO: Need to determine the style of name field being used
    if ( empty( $commerce_customer['first_name'] ) )
    {
        $customer['first_name'] = $commerce_customer['name_line'];
    } else
    {
        $customer['first_name'] = $commerce_customer['first_name'];
    }
    $customer['last_name'] = $commerce_customer['last_name'];
    $customer['mail'] = $account->mail;

    // @TODO: If user is anonymous then we need to get their email address from
    //   the "account information" field.

    // Build the data array that will be translated into hidden form values.
    $data = array( // Receiver Details
        'merchant_id' => $settings['merchant_id'],
        'merchant_key' => $settings['merchant_key'],
        'return_url' => url( 'checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array( 'absolute' => true ) ),
        'cancel_url' => url( 'checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array( 'absolute' => true ) ),
        'notify_url' => url( 'commerce_payfast/itn/' . $payment_method['instance_id'], array( 'absolute' => true ) ),
        // Payer Details
        'name_first' => $customer['first_name'],
        'name_last' => $customer['last_name'],
        'email_address' => $customer['mail'],
        // Transaction Details
        'm_payment_id' => $order->order_id . '-' . REQUEST_TIME,
        'amount' => round( commerce_currency_amount_to_decimal( $amount, $currency_code ), 2 ),
        'item_name' => t( 'Order @order_number at @store', array( '@order_number' => $order->order_number, '@store' => variable_get( 'site_name', url( '<front>',
        array( 'absolute' => true ) ) ) ) ),
        'item_description' => t( 'Product count: !count', array( '!count' => commerce_line_items_quantity( $wrapper->
        commerce_line_items, commerce_product_line_item_types() ) ) ), // Transaction Options
    //    'custom_int1' => $order->order_id,
    );

    foreach ( $wrapper->commerce_line_items as $delta => $line_item_wrapper )
    {
        $product_wrapper = $line_item_wrapper->commerce_product;

        if ( !is_null( $product_wrapper->field_cycles->value() ) && !is_null( $product_wrapper->field_frequency->value() )
        && !is_null( $product_wrapper->field_subscription_type->value() ) && !is_null( $product_wrapper->field_recurring_amount->value() ));
        {
            $data['custom_int1'] = $order->order_id;
            $data['custom_str1'] = gmdate( 'Y-m-d' );
            $data['subscription_type'] = $product_wrapper->field_subscription_type->value();
            $data['recurring_amount'] = $product_wrapper->field_recurring_amount->amount->value()/100;
            $data['frequency'] = $product_wrapper->field_frequency->value();
            $data['cycles'] = $product_wrapper->field_cycles->value();
        }
    }

    // Give other modules a chance to alter the payment settings before they're
    // sent off.
    $hook = 'commerce_payfast_website_payment_settings';
    foreach ( module_implements( $hook ) as $module )
    {
        $function = $module . '_' . $hook;
        $function( $data, $order, $payment_method );
    }

    // Generate MD5 security signature
    $pfOutput = '';
    // Create output string
    foreach( $data as $key => $value )
    {
        $pfOutput .= $key . '=' . urlencode(trim($value)) . '&';
    }
    $passPhrase = $settings['passphrase'];

    if ( empty( $passPhrase ) || $settings['server'] == 'sandbox' )
    {
        $pfOutput = substr( $pfOutput, 0, -1 );
    }
    else
    {
        $pfOutput = $pfOutput."passphrase=".urlencode( $passPhrase );
    }

    $data['signature'] = md5( $pfOutput );
    $data['user_agent'] = 'Drupal Commerce 7.x';

    $form['#action'] = 'https://' . commerce_payfast_server_url( $settings['server'] ) . '/eng/process';
    $form['#attributes'] = array( 'name' => 'frmPay' );

    foreach ( $data as $name => $value )
    {
        if ( ! empty( $value ) )
        {
            $form[$name] = array( '#type' => 'hidden', '#value' => $value );
        }
    }

    $form['submit'] = array( '#type' => 'submit', '#value' => t( 'Proceed to PayFast' ), );

    return $form;
}

/**
 * Return the PayFast server url.
 *
 * @param $server - One of 'sandbox' or 'live'.
 * @return the appropriate Hostname based on the $server setting.
 */
function commerce_payfast_server_url( $server )
{
    switch ( $server )
    {
        case 'sandbox':
            return 'sandbox.payfast.co.za';
        case 'live':
            return 'www.payfast.co.za';
    }
}

/**
 * Processes an incoming ITN.
 *
 * @param $payment_method
 *   The payment method instance array that originally made the payment.
 *
 * @return
 *   TRUE or FALSE indicating if the ITN was successfully processed.
 */
function commerce_payfast_process_itn( $payment_method )
{

    require_once ( 'payfast_common.inc' );

    $settings = $payment_method['settings'];

    if ( ! pfValidIP( $_SERVER['REMOTE_ADDR'] ) )
    {
        watchdog( 'commerce_payfast', 'PayFast REMOTE_IP mismatch: ' );
        return false;
    }

    $data = pfGetData();

    if ( $data === false )
    {
        watchdog( 'commerce_payfast', 'Empty ITN HTTP POST received from Payfast: ' . print_r( $data, true ) );
        return false;
    }

    watchdog( 'commerce_payfast', 'ITN HTTP POST received from Payfast: ' . print_r( $data, true ) );

    $passPhrase = $settings['passphrase'];
    $pfPassPhrase = empty( $passPhrase ) ? null : $passPhrase;

    if ( ! pfValidSignature( $data, $pfParamstring, $pfPassPhrase, $settings['server'] ) )
    {
        watchdog( 'commerce_payfast', 'PayFast error: Invalid signature ' );
        return false;
    }

    $itn = $_POST;
    $request = '';
    $itnPostData = array();
    $itnPostDataValuePairs = array();

    foreach ( $itn as $key => $value )
    {
        if ( $key == 'signature' )
            continue;

        $value = urlencode( stripslashes( $value ) );
        $value = preg_replace( '/(.*[^%^0^D])(%0A)(.*)/i', '${1}%0D%0A${3}', $value );

        $itnPostDataValuePairs[] = "$key=$value";
    }

    $itnVerifyRequest = implode( '&', $itnPostDataValuePairs );

	$pfHost = $server = commerce_payfast_server_url( $payment_method['settings']['server'] );

    if ( $itn['payment_status'] != 'CANCELLED' && ! pfValidData( $pfHost, $itnVerifyRequest, "https://$pfHost/eng/query/validate" ) )
    {
        watchdog( 'commerce_payfast', 'ITN POST data not verified', array(), WATCHDOG_ERROR );
        pflog( "ITN POST data integrity mismatch for $request\n" );
        return false;
    }

    // Exit if the ITN has already been processed.
    if ( $itn['payment_status'] != 'CANCELLED' )
    {
        if ( !empty($itn['pf_payment_id']) && $prior_itn = commerce_payfast_itn_load($itn['pf_payment_id'] ) )
        {
            watchdog( 'commerce_payfast', 'Attempted to process an ITN that has already been processed with transaction ID @txn_id.',
                array( '@txn_id' => $itn['pf_payment_id'] ), WATCHDOG_NOTICE );
            return false;
        }
    }

    list( $order_id, $timestamp ) = explode( '-', $itn['m_payment_id'] );

    $order = false;

    if ( !empty( $itn['token'] ) && strtotime( $itn['custom_str1'] ) > strtotime( gmdate( 'Y-m-d' ). '+ 2 days' ) )
    {
        // Create temporary order to transact against for recurring payment
        $order = commerce_order_new();
        commerce_order_save($order);
    }
    else
    {
        // Load order for once off payment, or initiating a subscription
        $order = commerce_order_load( $order_id );
    }

    if ( ! $order )
    {
        watchdog( 'commerce_payfast', 'Could not find order matching ITN order #', array(), WATCHDOG_ERROR );
        return false;
    }
	 $order_id = $order->order_id;

    // Set the key payment method variables
    $merchant_settings = array( 'id' => $payment_method['settings']['merchant_id'], 'key' => $payment_method['settings']['merchant_key'], );

    // Validate the ITN by checking the merchant_id and merchant_key
    if ( $merchant_settings['id'] != $itn['merchant_id'] )
    {
		watchdog( 'commerce_payfast', 'ITN rejected: Invalid merchant_id specified (@merchant_id).', array( '@merchant_id' => $itn['merchant_id'] ), WATCHDOG_ERROR );
        return false;
    }

    // Unknown status
    if ( $itn['payment_status'] != 'CANCELLED' )
    {
        if ($itn['payment_status'] != 'COMPLETE' )
        {
            watchdog('commerce_payfast', 'Invalid ITN payment status: @payment_status.', array('@payment_status' => $itn['payment_status']), WATCHDOG_ERROR);
            return false;
        }
    }

    $transaction = commerce_payment_transaction_new( 'commerce_payfast', $order->order_id );

    $transaction->instance_id = $payment_method['instance_id'];
    $transaction->remote_id = $itn['pf_payment_id'];
    $transaction->amount = commerce_currency_decimal_to_amount( $itn['amount_gross'], 'ZAR' );
    $transaction->currency_code = 'ZAR';
    $transaction->payload[REQUEST_TIME] = $itn;
    $transaction->remote_status = $itn['payment_status'];
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    $transaction->subscription_token = $itn['token'];
    $transaction->order_id = $itn['custom_int1'];
    $transaction->message = t('The payment has completed.');

    if ( !empty( $itn['token'] ) && strtotime( $itn['custom_str1'] ) <= strtotime( gmdate( 'Y-m-d' ). '+ 2 days' ) )
    {
        $transaction->message = t('Subscription initiated for order # ' . $itn['custom_int1'] );
    }

    if ( !empty( $itn['token'] ) && strtotime( $itn['custom_str1'] ) > strtotime( gmdate( 'Y-m-d' ). '+ 2 days' ) )
    {
        $transaction->order_id = $order->order_id;
        $transaction->message = t('Subscription payment completed for order # ' . $itn['custom_int1'] );
    }

    if ( $itn['payment_status'] == 'CANCELLED' )
    {
        $transaction->message = t( 'Subscription for order # ' . $itn['custom_int1'] . ' cancelled.' );
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    }

    commerce_payment_transaction_save($transaction);

    $itn['transaction_id'] = $transaction->transaction_id;
    $itn['order_id'] = $order->order_id;
    $itn['server'] = $server;
    $itn['subscription_token'] = $itn['token'];

    commerce_payfast_itn_save( $itn );

    if ( !empty( $itn['token'] ) && strtotime( $itn['custom_str1'] ) > strtotime( gmdate( 'Y-m-d' ). '+ 2 days' ) )
    {
        // Set transaction to correct order
        db_update('commerce_payment_transaction')
            ->condition('order_id', $order->order_id)
            ->fields(array('order_id' => $itn['custom_int1']))
            ->execute();

        db_update('commerce_payfast_itn')
            ->condition('order_id', $order->order_id)
            ->fields(array('order_id' => $itn['custom_int1']))
            ->execute();

        // Delete temporary order
        db_delete('commerce_order')
            ->condition('order_id', $order->order_id)
            ->execute();
    }

    watchdog( 'commerce_payfast', 'Valid ITN processed for Order @order_number with ID @txn_id.',
	array( '@txn_id' => $itn['pf_payment_id'], '@order_number' => $order->order_number ), WATCHDOG_INFO );
}

/**
 * Loads a stored ITN by ID.
 *
 * @param $id
 *   The ID of the ITN to load.
 * @param $type
 *   The type of ID you've specified, either the serial numeric itn_id or the
 *     actual PayFast pf_payment_id. Defaults to pf_payment_id.
 *
 * @return
 *   The original ITN with some meta data related to local processing.
 */
function commerce_payfast_itn_load( $id, $type = 'pf_payment_id' )
{
    return db_select( 'commerce_payfast_itn', 'cpi' )->fields( 'cpi' )->condition( 'cpi.' . $type, $id )->execute()->fetchAssoc();
}

/**
 * Saves an ITN with some meta data related to local processing.
 *
 * @param $itn
 *   An ITN array with additional parameters for the order_id and Commerce
 *     Payment transaction_id associated with the ITN.
 *
 * @return
 *   The operation performed by drupal_write_record() on save; since the ITN is
 *     received by reference, it will also contain the serial numeric itn_id
 *     used locally.
 */
function commerce_payfast_itn_save( &$itn )
{

    if ( ! empty( $itn['itn_id'] ) && commerce_payfast_itn_load( $itn['pf_payment_id'] ) )
    {
        $itn['changed'] = REQUEST_TIME;
        return drupal_write_record( 'commerce_payfast_itn', $itn, 'itn_id' );
    } else
    {
        $itn['created'] = REQUEST_TIME;
        $itn['changed'] = REQUEST_TIME;
        return drupal_write_record( 'commerce_payfast_itn', $itn );
    }
}