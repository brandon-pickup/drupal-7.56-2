<?php

function add_dcct_menu() {
  $items = array();

  $items['examples/add_dcct'] = array( //this creates a URL that will call this form at "examples/add_dcct"
    'title' => 'Add product', //page title
    'description' => 'A form to mess around with.',
    'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
    'page arguments' => array('add_dcct_form'), //put the name of the form here
    'access callback' => TRUE
  );

  return $items;
}

function  add_dcct_form($form, &$form_state) {

  $external_link = t('DCCT Tutorial <a href="@dcctut">Video</a>.', array('@dcctut' => 'https://www.youtube.com'));

$form['some_text'] = array(
  '#markup' => $external_link
);

 $form['sku'] = array(
    '#type' => 'textfield', //you can find a list of available types in the form api
    '#title' => 'What is the new products SKU?',
    '#size' => 10,
    '#maxlength' => 5,
    '#required' => TRUE, //make this field required 
  );

 $form['title'] = array(
    '#type' => 'textfield', //you can find a list of available types in the form api
    '#title' => 'What is the product title/name?',
    '#size' => 20,
    '#maxlength' => 20,
    '#required' => TRUE, //make this field required 
  );

 $form['price'] = array(
    '#type' => 'textfield', //you can find a list of available types in the form api
    '#title' => 'What is the Price?',
    '#size' => 10,
    '#maxlength' => 10,
    '#required' => TRUE, //make this field required 
  );

 $form['size'] = array(
    '#type' => 'textfield', //you can find a list of available types in the form api
    '#title' => 'What is the size of the product?',
    '#size' => 10,
    '#maxlength' => 3,
    '#required' => FALSE, //make this field required 
  );

$form['upload'] = array(
    '#type' => 'file',
    '#title' => t('Choose a file'),
    '#description' => t('Upload a files: jpg, jpeg, png, gif'),
    '#size' => 22,
    '#theme_wrappers' => array(),
    '#weight' => -10,
  );

  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('SUBMIT'),
  );
  
  return $form;
}

function  add_dcct_form_validate($form, &$form_state) {
  if (!($form_state['values']['price'] > 0)){
    form_set_error('price', t('Price must be a positive number.'));
  }
  if (commerce_product_load_by_sku($form_state['values']['sku'])){
      form_set_error('sku', t('Product with that SKU already exsts.'));
  }
}

function  add_dcct_form_submit($form, &$form_state) {
$file = file_save_upload('upload', array(
    'file_validate_extensions' => array('png jpg jpeg gif'), // Validate extensions.
));

// If the file passed validation:
if ($file) {
// Move the file, into the Drupal file system
if ($file = file_move($file, 'public://')) {
  $file->status = FILE_STATUS_PERMANENT;
 // $file->file_display = 1;
  $file = file_save($file);

} else {
  form_set_error('upload', t('Failed to write the uploaded file the site\s file folder.'));
}
 } else {
  form_set_error('upload',t('No file was uploaded. Product without image'));
 }

 // Product
      $product = commerce_product_new('product');
      $product->sku = $form_state['values']['sku'];
      $product->title = $form_state['values']['title'];
      $product->language = LANGUAGE_NONE;
      $product->field_image1[LANGUAGE_NONE][0] = (array)$file;
      $product->field_size[LANGUAGE_NONE][0] =  $form_state['values']['size'];
      $product->uid = 1;
      $product->commerce_price[LANGUAGE_NONE][0] = array(
        'amount' => (int)$form_state['values']['price'] * 100, // $10
        'currency_code' => "ZAR",
      );
      commerce_product_save($product);
      $product->field_product_category[LANGUAGE_NONE][0]['tid'] = 1; // 1 = the term id
      $product->commerce_stock[LANGUAGE_NONE][0]['value'] = 1;
       $product->commerce_price[LANGUAGE_NONE][0]['data']['include_tax'] = "vat"; // "vat" = machine name for the tax
        $product->commerce_price[LANGUAGE_NONE][0]['include_tax'] = "vat"; // "vat" = machine name for the tax

	commerce_display_product_create_method($product);

}

function commerce_display_product_create_method($product){

$nodes = node_load_multiple(array(), array('type' => 'product_display'));
$newDisplay = TRUE;
foreach ($nodes as $node) {
   if ($node->title == $product->title){
      $newDisplay = FALSE;
      $node->field_product[LANGUAGE_NONE][]['product_id'] = $product->product_id;
      node_save($node);
      break;
}
  }
if (TRUE == $newDisplay){
    $node = new stdClass();
    $node->type = 'product_display';
    node_object_prepare($node);

    $node->title    = $product->title;
    $node->language = LANGUAGE_NONE;
    $node->field_product[LANGUAGE_NONE][0]['product_id'] = $product->product_id;
    node_save($node);
    }
}